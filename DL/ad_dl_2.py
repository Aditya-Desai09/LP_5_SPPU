# -*- coding: utf-8 -*-
"""AD_DL_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15e0YZ3svl_cL6OlXc2r1OkItfB7k5Akn
"""

# Aditya Desai
# BE-A-16
# DL EXPT:02

from keras.datasets import imdb

# Load the data, keeping only 10,000 of the most frequently occuring words
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words = 10000)

# Verify the maximum word index
max_index = max([max(sequence) for sequence in train_data])
print("Maximum word index in training data:", max_index)

# Decode the first review
word_index = imdb.get_word_index()
reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])

# Decode the review
decoded_review = ' '.join([reverse_word_index.get(i - 3, '?') for i in train_data[0]])
print("Decoded review:", decoded_review)

# Step 2: Preparing the Data
import numpy as np

def vectorize_sequences(sequences, dimension=10000):
    results = np.zeros((len(sequences), dimension))  # Create an all-zero matrix
    for i, sequence in enumerate(sequences):
        results[i, sequence] = 1  # Set specific indices of results[i] to 1s
    return results

# Vectorize training and testing data
X_train = vectorize_sequences(train_data)
X_test = vectorize_sequences(test_data)

# Vectorize labels
y_train = np.asarray(train_labels).astype('float32')
y_test = np.asarray(test_labels).astype('float32')

# Step 3: Model definition
from keras import models
from keras import layers

model = models.Sequential()
model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

# Step 4: Compiling the model
from keras import optimizers
from keras import losses
from keras import metrics

model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),
              loss=losses.binary_crossentropy,
              metrics=[metrics.binary_accuracy])

# Step 5: Setting up Validation
X_val = X_train[:10000]
partial_X_train = X_train[10000:]
y_val = y_train[:10000]
partial_y_train = y_train[10000:]

# Step 6: Training our model
history = model.fit(partial_X_train,
                    partial_y_train,
                    epochs=20,
                    batch_size=512,
                    validation_data=(X_val, y_val))

history_dict = history.history
history_dict.keys()

# Step 7: Plot Training and Validation Losses and Accuracy
import matplotlib.pyplot as plt

# Plotting losses
history_dict = history.history
loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']
epochs = range(1, len(loss_values) + 1)

plt.plot(epochs, loss_values, 'bo', label="Training Loss")
plt.plot(epochs, val_loss_values, 'b', label="Validation Loss")
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss Value')
plt.legend()
plt.show()

# Plotting accuracy
acc_values = history_dict['binary_accuracy']
val_acc_values = history_dict['val_binary_accuracy']

plt.plot(epochs, acc_values, 'ro', label="Training Accuracy")
plt.plot(epochs, val_acc_values, 'r', label="Validation Accuracy")
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Step 8: Retraining our model
model.fit(partial_X_train,
          partial_y_train,
          epochs=3,
          batch_size=512,
          validation_data=(X_val, y_val))

# Step 9: Model Evaluation
# Making predictions for testing data
result = model.predict(X_test)

# Convert predictions to binary
y_pred = (result > 0.5).astype(int).flatten()

# Calculate Mean Absolute Error
from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_pred, y_test)
print("Mean Absolute Error:", mae)

